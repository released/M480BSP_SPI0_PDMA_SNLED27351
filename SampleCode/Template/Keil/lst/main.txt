; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Custom_Init||, CODE, READONLY, ALIGN=2

                  Custom_Init PROC
;;;308    }
;;;309    void Custom_Init(void)
000000  b510              PUSH     {r4,lr}
;;;310    {	
;;;311    	//EVM LED
;;;312    	GPIO_SetMode(PH,BIT0,GPIO_MODE_OUTPUT);
000002  4c09              LDR      r4,|L1.40|
000004  2201              MOVS     r2,#1
000006  4611              MOV      r1,r2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;313    	GPIO_SetMode(PH,BIT1,GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  2102              MOVS     r1,#2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;314    	GPIO_SetMode(PH,BIT2,GPIO_MODE_OUTPUT);
000018  4620              MOV      r0,r4
00001a  2201              MOVS     r2,#1
00001c  e8bd4010          POP      {r4,lr}
000020  2104              MOVS     r1,#4
000022  f7ffbffe          B.W      GPIO_SetMode
;;;315    	
;;;316    }
;;;317    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      0x400041c0

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_EnableIRQ PROC
;;;1625    */
;;;1626   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1627   {
;;;1628     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01100          STR      r1,[r0,#0x100]
;;;1629   }
000014  4770              BX       lr
;;;1630   
                          ENDP


                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;317    
;;;318    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  0784              LSLS     r4,r0,#30
000006  2116              MOVS     r1,#0x16
000008  2288              MOVS     r2,#0x88
                  |L3.10|
00000a  f8c40100          STR      r0,[r4,#0x100]
00000e  f8c41100          STR      r1,[r4,#0x100]
000012  f8c42100          STR      r2,[r4,#0x100]
000016  f8d43100          LDR      r3,[r4,#0x100]
00001a  2b00              CMP      r3,#0
00001c  d0f5              BEQ      |L3.10|
;;;319    {
;;;320        /*---------------------------------------------------------------------------------------------------------*/
;;;321        /* Init System Clock                                                                                       */
;;;322        /*---------------------------------------------------------------------------------------------------------*/
;;;323        /* Unlock protected registers */
;;;324        SYS_UnlockReg();
;;;325    
;;;326        /* Set XT1_OUT(PF.2) and XT1_IN(PF.3) to input mode */
;;;327        PF->MODE &= ~(GPIO_MODE_MODE2_Msk | GPIO_MODE_MODE3_Msk);
00001e  f04f2540          MOV      r5,#0x40004000
000022  f8d50140          LDR      r0,[r5,#0x140]
000026  f02000f0          BIC      r0,r0,#0xf0
00002a  f8c50140          STR      r0,[r5,#0x140]
;;;328    
;;;329        /* Enable External XTAL (4~24 MHz) */
;;;330        CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk|CLK_PWRCTL_HIRCEN_Msk|CLK_PWRCTL_LIRCEN_Msk);
00002e  200d              MOVS     r0,#0xd
000030  f7fffffe          BL       CLK_EnableXtalRC
;;;331    
;;;332        /* Waiting for 12MHz clock ready */
;;;333        CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk|CLK_STATUS_HIRCSTB_Msk|CLK_STATUS_LIRCSTB_Msk);
000034  2019              MOVS     r0,#0x19
000036  f7fffffe          BL       CLK_WaitClockReady
;;;334    
;;;335        /* Set core clock as PLL_CLOCK from PLL */
;;;336        CLK_SetCoreClock(FREQ_192MHZ);
00003a  4828              LDR      r0,|L3.220|
00003c  f7fffffe          BL       CLK_SetCoreClock
;;;337        /* Set PCLK0/PCLK1 to HCLK/2 */
;;;338        CLK->PCLKDIV = (CLK_PCLKDIV_APB0DIV_DIV2 | CLK_PCLKDIV_APB1DIV_DIV2);
000040  2011              MOVS     r0,#0x11
000042  f8c40234          STR      r0,[r4,#0x234]
;;;339    
;;;340        /* Enable UART clock */
;;;341        CLK_EnableModuleClock(UART0_MODULE);
000046  4e26              LDR      r6,|L3.224|
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;342        /* Select UART clock source from HXT */
;;;343        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HIRC, CLK_CLKDIV0_UART0(1));
00004e  2200              MOVS     r2,#0
000050  f04f7140          MOV      r1,#0x3000000
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       CLK_SetModuleClock
;;;344    
;;;345        /* Set GPB multi-function pins for UART0 RXD and TXD */
;;;346        SYS->GPB_MFPH &= ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk);
00005a  6be0              LDR      r0,[r4,#0x3c]
00005c  f420007f          BIC      r0,r0,#0xff0000
000060  63e0              STR      r0,[r4,#0x3c]
;;;347        SYS->GPB_MFPH |= (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
000062  6be0              LDR      r0,[r4,#0x3c]
000064  f44000cc          ORR      r0,r0,#0x660000
000068  63e0              STR      r0,[r4,#0x3c]
;;;348    
;;;349    
;;;350        CLK_SetModuleClock(SPI0_MODULE, CLK_CLKSEL2_SPI0SEL_HIRC, MODULE_NoMsk);
00006a  4e1e              LDR      r6,|L3.228|
00006c  2200              MOVS     r2,#0
00006e  2130              MOVS     r1,#0x30
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       CLK_SetModuleClock
;;;351        CLK_EnableModuleClock(SPI0_MODULE);
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       CLK_EnableModuleClock
;;;352    
;;;353        CLK_EnableModuleClock(PDMA_MODULE);
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       CLK_EnableModuleClock
;;;354    
;;;355    	CLK_EnableModuleClock(TMR0_MODULE);
000082  4e19              LDR      r6,|L3.232|
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       CLK_EnableModuleClock
;;;356    	CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HIRC, 0);
00008a  2200              MOVS     r2,#0
00008c  f44f61e0          MOV      r1,#0x700
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       CLK_SetModuleClock
;;;357    	
;;;358        CLK_EnableModuleClock(TMR1_MODULE);
000096  4e15              LDR      r6,|L3.236|
000098  4630              MOV      r0,r6
00009a  f7fffffe          BL       CLK_EnableModuleClock
;;;359        CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_HIRC, 0);
00009e  2200              MOVS     r2,#0
0000a0  f44f41e0          MOV      r1,#0x7000
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       CLK_SetModuleClock
;;;360    	
;;;361        /* Update System Core Clock */
;;;362        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;363        SystemCoreClockUpdate();
0000aa  f7fffffe          BL       SystemCoreClockUpdate
;;;364    
;;;365    	/*
;;;366    		SPI0 LED driver x 5
;;;367    
;;;368    		SPI0_LED_NSS0 : PA.6
;;;369    		SPI0_LED_NSS1 : PA.7		
;;;370    		SPI0_LED_NSS2 : PA.11
;;;371    		
;;;372    		SPI0_LED_NSS3 : PF.1 * ICE_CLK	
;;;373    		SPI0_LED_NSS4 : PF.0 * ICE_DAT
;;;374    
;;;375    		SDB : PC.14	//SNLED27351 , Hardware power down the chip when pull to low. 
;;;376    
;;;377    		SPI0_LED_MOSI : PA.0
;;;378    		SPI0_LED_MISO : PA.1		
;;;379    		SPI0_LED_CLK : PA.2
;;;380    
;;;381    	*/
;;;382        SYS->GPA_MFPL &= ~(SYS_GPA_MFPL_PA2MFP_Msk | SYS_GPA_MFPL_PA1MFP_Msk| SYS_GPA_MFPL_PA0MFP_Msk);
0000ae  6b20              LDR      r0,[r4,#0x30]
0000b0  f36f000b          BFC      r0,#0,#12
0000b4  6320              STR      r0,[r4,#0x30]
;;;383        SYS->GPA_MFPL |= SYS_GPA_MFPL_PA2MFP_SPI0_CLK| SYS_GPA_MFPL_PA1MFP_SPI0_MISO| SYS_GPA_MFPL_PA0MFP_SPI0_MOSI ;
0000b6  6b20              LDR      r0,[r4,#0x30]
0000b8  f2404144          MOV      r1,#0x444
0000bc  4308              ORRS     r0,r0,r1
0000be  6320              STR      r0,[r4,#0x30]
;;;384    	
;;;385        /* Enable SPI0 clock pin schmitt trigger */
;;;386        PA->SMTEN |= (GPIO_SMTEN_SMTEN2_Msk | GPIO_SMTEN_SMTEN1_Msk | GPIO_SMTEN_SMTEN0_Msk);
0000c0  6a68              LDR      r0,[r5,#0x24]
0000c2  f0400007          ORR      r0,r0,#7
0000c6  6268              STR      r0,[r5,#0x24]
;;;387        /* Enable SPI0 I/O high slew rate */
;;;388    	GPIO_SetSlewCtl(PA, (BIT2 | BIT1 | BIT1), GPIO_SLEWCTL_FAST);
0000c8  2202              MOVS     r2,#2
0000ca  2106              MOVS     r1,#6
0000cc  4628              MOV      r0,r5
0000ce  f7fffffe          BL       GPIO_SetSlewCtl
0000d2  2000              MOVS     r0,#0
0000d4  f8c40100          STR      r0,[r4,#0x100]
;;;389    
;;;390    	
;;;391        /* Lock protected registers */
;;;392        SYS_LockReg();
;;;393    }
0000d8  bd70              POP      {r4-r6,pc}
;;;394    
                          ENDP

0000da  0000              DCW      0x0000
                  |L3.220|
                          DCD      0x0b71b000
                  |L3.224|
                          DCD      0x57803d10
                  |L3.228|
                          DCD      0x6640000d
                  |L3.232|
                          DCD      0x5e800002
                  |L3.236|
                          DCD      0x5ec00003

                          AREA ||i.TIMER1_Init||, CODE, READONLY, ALIGN=2

                  TIMER1_Init PROC
;;;301    
;;;302    void TIMER1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;303    {
;;;304        TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L4.44|
000004  f44f727a          MOV      r2,#0x3e8
000008  f04f6100          MOV      r1,#0x8000000
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  f0405000          ORR      r0,r0,#0x20000000
000018  6020              STR      r0,[r4,#0]
;;;305        TIMER_EnableInt(TIMER1);
;;;306        NVIC_EnableIRQ(TMR1_IRQn);	
00001a  2021              MOVS     r0,#0x21
00001c  f7fffffe          BL       NVIC_EnableIRQ
000020  6820              LDR      r0,[r4,#0]
000022  f0404080          ORR      r0,r0,#0x40000000
000026  6020              STR      r0,[r4,#0]
;;;307        TIMER_Start(TIMER1);
;;;308    }
000028  bd10              POP      {r4,pc}
;;;309    void Custom_Init(void)
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x40050100

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR1_IRQHandler PROC
;;;276    
;;;277    void TMR1_IRQHandler(void)
000000  480a              LDR      r0,|L5.44|
000002  6881              LDR      r1,[r0,#8]
000004  f3c10100          UBFX     r1,r1,#0,#1
;;;278    {
000008  2900              CMP      r1,#0
00000a  d00e              BEQ      |L5.42|
00000c  2101              MOVS     r1,#1
00000e  6081              STR      r1,[r0,#8]
;;;279    	static uint16_t CNT_1000ms = 0;	
;;;280    	
;;;281    //	static uint32_t log = 0;	
;;;282    	
;;;283        if(TIMER_GetIntFlag(TIMER1) == 1)
;;;284        {
;;;285            TIMER_ClearIntFlag(TIMER1);
;;;286    	
;;;287    		if (CNT_1000ms++ > 1000)
000010  4907              LDR      r1,|L5.48|
000012  8808              LDRH     r0,[r1,#0]  ; CNT_1000ms
000014  1c42              ADDS     r2,r0,#1
000016  800a              STRH     r2,[r1,#0]
000018  f5b07f7a          CMP      r0,#0x3e8
00001c  d905              BLS      |L5.42|
;;;288    		{		
;;;289    			CNT_1000ms = 0;
00001e  2000              MOVS     r0,#0
000020  8008              STRH     r0,[r1,#0]
;;;290    			#if (_debug_log_UART_ == 1)	//debug			
;;;291    //			printf("%s : %2d\r\n" , __FUNCTION__ , log++);
;;;292    			#endif		
;;;293    		
;;;294    			set_flag(flag_UART_PDMA , ENABLE);
000022  6848              LDR      r0,[r1,#4]  ; BitFlag
000024  f0400008          ORR      r0,r0,#8
000028  6048              STR      r0,[r1,#4]  ; BitFlag
                  |L5.42|
;;;295    
;;;296    		}
;;;297    	
;;;298        }
;;;299    }
00002a  4770              BX       lr
;;;300    
                          ENDP

                  |L5.44|
                          DCD      0x40050100
                  |L5.48|
                          DCD      ||area_number.19||

                          AREA ||i.UART0_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART0_IRQHandler PROC
;;;233    
;;;234    void UART0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;235    {
;;;236        if(UART_GET_INT_FLAG(UART0, UART_INTSTS_RDAINT_Msk | UART_INTSTS_RXTOINT_Msk))     /* UART receive data available flag */
000002  4c0b              LDR      r4,|L6.48|
000004  69e0              LDR      r0,[r4,#0x1c]
000006  f4105f88          TST      r0,#0x1100
00000a  d102              BNE      |L6.18|
00000c  e004              B        |L6.24|
                  |L6.14|
;;;237        {
;;;238            while(UART_GET_RX_EMPTY(UART0) == 0)
;;;239            {
;;;240    			UARTx_Process();
00000e  f7fffffe          BL       UARTx_Process
                  |L6.18|
000012  69a1              LDR      r1,[r4,#0x18]         ;238
000014  0449              LSLS     r1,r1,#17             ;238
000016  d5fa              BPL      |L6.14|
                  |L6.24|
;;;241            }
;;;242        }
;;;243    
;;;244        if(UART0->FIFOSTS & (UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk | UART_FIFOSTS_RXOVIF_Msk))
000018  69a1              LDR      r1,[r4,#0x18]
00001a  4620              MOV      r0,r4
00001c  f0110f71          TST      r1,#0x71
000020  d005              BEQ      |L6.46|
;;;245        {
;;;246            UART_ClearIntFlag(UART0, (UART_INTSTS_RLSINT_Msk| UART_INTSTS_BUFERRINT_Msk));
000022  e8bd4010          POP      {r4,lr}
000026  f44f5110          MOV      r1,#0x2400
00002a  f7ffbffe          B.W      UART_ClearIntFlag
                  |L6.46|
;;;247        }
;;;248    }
00002e  bd10              POP      {r4,pc}
;;;249    
                          ENDP

                  |L6.48|
                          DCD      0x40070000

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;249    
;;;250    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;251    {
;;;252        SYS_ResetModule(UART0_RST);
000002  481e              LDR      r0,|L7.124|
000004  f7fffffe          BL       SYS_ResetModule
;;;253    
;;;254        /* Configure UART0 and set UART0 baud rate */
;;;255        UART_Open(UART0, 115200);
000008  4c1d              LDR      r4,|L7.128|
00000a  f44f31e1          MOV      r1,#0x1c200
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;256    
;;;257    	/* Set UART receive time-out */
;;;258    	UART_SetTimeoutCnt(UART0, 20);
000014  2114              MOVS     r1,#0x14
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_SetTimeoutCnt
;;;259    
;;;260    	UART0->FIFO &= ~UART_FIFO_RFITL_4BYTES;
00001c  68a0              LDR      r0,[r4,#8]
00001e  f0200010          BIC      r0,r0,#0x10
000022  60a0              STR      r0,[r4,#8]
;;;261    	UART0->FIFO |= UART_FIFO_RFITL_8BYTES;
000024  68a0              LDR      r0,[r4,#8]
000026  f0400020          ORR      r0,r0,#0x20
00002a  60a0              STR      r0,[r4,#8]
;;;262    
;;;263    	/* Enable UART Interrupt - */
;;;264    	UART_ENABLE_INT(UART0, UART_INTEN_RDAIEN_Msk | UART_INTEN_TOCNTEN_Msk | UART_INTEN_RXTOIEN_Msk);
00002c  6860              LDR      r0,[r4,#4]
00002e  f6400111          MOV      r1,#0x811
000032  4308              ORRS     r0,r0,r1
000034  6060              STR      r0,[r4,#4]
;;;265    	
;;;266    	NVIC_EnableIRQ(UART0_IRQn);
000036  2024              MOVS     r0,#0x24
000038  f7fffffe          BL       NVIC_EnableIRQ
;;;267    
;;;268    	#if (_debug_log_UART_ == 1)	//debug
;;;269    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
00003c  f7fffffe          BL       CLK_GetCPUFreq
000040  4601              MOV      r1,r0
000042  a010              ADR      r0,|L7.132|
000044  f7fffffe          BL       __2printf
;;;270    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000048  f7fffffe          BL       CLK_GetHXTFreq
00004c  4601              MOV      r1,r0
00004e  a014              ADR      r0,|L7.160|
000050  f7fffffe          BL       __2printf
;;;271    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
000054  f7fffffe          BL       CLK_GetLXTFreq
000058  4601              MOV      r1,r0
00005a  a017              ADR      r0,|L7.184|
00005c  f7fffffe          BL       __2printf
;;;272    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000060  f7fffffe          BL       CLK_GetPCLK0Freq
000064  4601              MOV      r1,r0
000066  a01a              ADR      r0,|L7.208|
000068  f7fffffe          BL       __2printf
;;;273    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
00006c  f7fffffe          BL       CLK_GetPCLK1Freq
000070  4601              MOV      r1,r0
000072  e8bd4010          POP      {r4,lr}
000076  a01d              ADR      r0,|L7.236|
000078  f7ffbffe          B.W      __2printf
;;;274    	#endif
;;;275    }
;;;276    
                          ENDP

                  |L7.124|
                          DCD      0x04000010
                  |L7.128|
                          DCD      0x40070000
                  |L7.132|
000084  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000088  4b5f4765
00008c  74435055
000090  46726571
000094  203a2025
000098  38640d0a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L7.160|
0000a0  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
0000a4  47657448
0000a8  58544672
0000ac  6571203a
0000b0  20253864
0000b4  0d0a00  
0000b7  00                DCB      0
                  |L7.184|
0000b8  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000bc  4765744c
0000c0  58544672
0000c4  6571203a
0000c8  20253864
0000cc  0d0a00  
0000cf  00                DCB      0
                  |L7.208|
0000d0  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000d4  47657450
0000d8  434c4b30
0000dc  46726571
0000e0  203a2025
0000e4  38640d0a
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L7.236|
0000ec  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000f0  47657450
0000f4  434c4b31
0000f8  46726571
0000fc  203a2025
000100  38640d0a
000104  00      
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0

                          AREA ||i.UARTx_Process||, CODE, READONLY, ALIGN=2

                  UARTx_Process PROC
;;;163    
;;;164    void UARTx_Process(void)
000000  482d              LDR      r0,|L8.184|
;;;165    {
;;;166    	uint8_t res = 0;
;;;167    	
;;;168    	res = UART_READ(UART0);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;169    
;;;170    	if (res > 0x7F)
000006  287f              CMP      r0,#0x7f
000008  d902              BLS      |L8.16|
;;;171    	{
;;;172    		printf("invalid command\r\n");
00000a  a02c              ADR      r0,|L8.188|
00000c  f7ffbffe          B.W      __2printf
                  |L8.16|
;;;173    	}
;;;174    	else
;;;175    	{
;;;176    		switch(res)
000010  2861              CMP      r0,#0x61
000012  d039              BEQ      |L8.136|
000014  dc14              BGT      |L8.64|
000016  2846              CMP      r0,#0x46
000018  d042              BEQ      |L8.160|
00001a  dc08              BGT      |L8.46|
00001c  f1a00041          SUB      r0,r0,#0x41
000020  2805              CMP      r0,#5
000022  d248              BCS      |L8.182|
000024  e8dff000          TBB      [pc,r0]
000028  30333639          DCB      0x30,0x33,0x36,0x39
00002c  1700              DCB      0x17,0x00
                  |L8.46|
00002e  2847              CMP      r0,#0x47
000030  d039              BEQ      |L8.166|
000032  2851              CMP      r0,#0x51
000034  d039              BEQ      |L8.170|
000036  2858              CMP      r0,#0x58
000038  d019              BEQ      |L8.110|
00003a  285a              CMP      r0,#0x5a
00003c  d13b              BNE      |L8.182|
00003e  e016              B        |L8.110|
                  |L8.64|
000040  2866              CMP      r0,#0x66
000042  d02d              BEQ      |L8.160|
000044  dc0b              BGT      |L8.94|
000046  2862              CMP      r0,#0x62
000048  d021              BEQ      |L8.142|
00004a  2863              CMP      r0,#0x63
00004c  d022              BEQ      |L8.148|
00004e  2864              CMP      r0,#0x64
000050  d023              BEQ      |L8.154|
000052  2865              CMP      r0,#0x65
000054  d12f              BNE      |L8.182|
;;;177    		{
;;;178    	
;;;179    			case 'A':	
;;;180    			case 'a':			
;;;181    				LED_SnledType4Fun1(SPI_LED0);								
;;;182    				break;
;;;183    
;;;184    			case 'B':	
;;;185    			case 'b':			
;;;186    				LED_SnledType4Fun2(SPI_LED0);								
;;;187    				break;				
;;;188    
;;;189    			case 'C':	
;;;190    			case 'c':			
;;;191    				LED_SnledType4Fun3(SPI_LED0);								
;;;192    				break;
;;;193    
;;;194    			case 'D':	
;;;195    			case 'd':			
;;;196    				LED_SnledSetColor(SPI_LED0 , 0xFF ,0xFF ,0xFF);								
;;;197    				break;
;;;198    
;;;199    			case 'E':	
;;;200    			case 'e':			
;;;201    				LED_SnledSetColor(SPI_LED0 , 0xFF ,0x00 ,0x00);									
000056  2300              MOVS     r3,#0
000058  461a              MOV      r2,r3
                  |L8.90|
00005a  21ff              MOVS     r1,#0xff              ;196
00005c  e028              B        |L8.176|
                  |L8.94|
00005e  2867              CMP      r0,#0x67              ;176
000060  d021              BEQ      |L8.166|
000062  2871              CMP      r0,#0x71              ;176
000064  d021              BEQ      |L8.170|
000066  2878              CMP      r0,#0x78              ;176
000068  d001              BEQ      |L8.110|
00006a  287a              CMP      r0,#0x7a              ;176
00006c  d123              BNE      |L8.182|
                  |L8.110|
00006e  f3bf8f4f          DSB                            ;176
000072  4817              LDR      r0,|L8.208|
000074  6801              LDR      r1,[r0,#0]            ;176
000076  4a17              LDR      r2,|L8.212|
000078  f40161e0          AND      r1,r1,#0x700          ;176
00007c  4311              ORRS     r1,r1,r2              ;176
00007e  6001              STR      r1,[r0,#0]            ;176
000080  f3bf8f4f          DSB                            ;176
                  |L8.132|
000084  bf00              NOP                            ;176
000086  e7fd              B        |L8.132|
                  |L8.136|
000088  2000              MOVS     r0,#0                 ;181
00008a  f7ffbffe          B.W      LED_SnledType4Fun1
                  |L8.142|
00008e  2000              MOVS     r0,#0                 ;186
000090  f7ffbffe          B.W      LED_SnledType4Fun2
                  |L8.148|
000094  2000              MOVS     r0,#0                 ;191
000096  f7ffbffe          B.W      LED_SnledType4Fun3
                  |L8.154|
00009a  23ff              MOVS     r3,#0xff              ;196
00009c  461a              MOV      r2,r3                 ;196
00009e  e7dc              B        |L8.90|
                  |L8.160|
;;;202    				break;
;;;203    
;;;204    			case 'F':	
;;;205    			case 'f':			
;;;206    				LED_SnledSetColor(SPI_LED0 , 0x00 ,0xFF ,0x00);									
0000a0  2300              MOVS     r3,#0
0000a2  22ff              MOVS     r2,#0xff
;;;207    				break;	
0000a4  e003              B        |L8.174|
                  |L8.166|
;;;208    
;;;209    			case 'G':	
;;;210    			case 'g':			
;;;211    				LED_SnledSetColor(SPI_LED0 , 0x00 ,0x00 ,0xFF);									
0000a6  23ff              MOVS     r3,#0xff
;;;212    				break;	
0000a8  e000              B        |L8.172|
                  |L8.170|
;;;213    				
;;;214    			case 'Q':	
;;;215    			case 'q':			
;;;216    //				LED_SnledType4Fun4();
;;;217    				LED_SnledSetColor(SPI_LED0 , 0x00 ,0x00 ,0x00);									
0000aa  2300              MOVS     r3,#0
                  |L8.172|
0000ac  2200              MOVS     r2,#0
                  |L8.174|
0000ae  2100              MOVS     r1,#0
                  |L8.176|
0000b0  2000              MOVS     r0,#0
0000b2  f7ffbffe          B.W      LED_SnledSetColor
                  |L8.182|
;;;218    				break;	
;;;219    				
;;;220    
;;;221    			case 'X':
;;;222    			case 'x':
;;;223    			case 'Z':
;;;224    			case 'z':
;;;225    				NVIC_SystemReset();
;;;226    			
;;;227    				break;		
;;;228    			
;;;229    		}
;;;230    	}
;;;231    }
0000b6  4770              BX       lr
;;;232    
                          ENDP

                  |L8.184|
                          DCD      0x40070000
                  |L8.188|
0000bc  696e7661          DCB      "invalid command\r\n",0
0000c0  6c696420
0000c4  636f6d6d
0000c8  616e640d
0000cc  0a00    
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L8.208|
                          DCD      0xe000ed0c
                  |L8.212|
                          DCD      0x05fa0004

                          AREA ||i.compare_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  compare_buffer PROC
;;;34     /*_____ F U N C T I O N S ______------______________________________________*/
;;;35     void compare_buffer(uint8_t *src, uint8_t *des, int nBytes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;36     {
000004  4616              MOV      r6,r2
000006  460f              MOV      r7,r1
000008  4680              MOV      r8,r0
;;;37         uint16_t i = 0;	
00000a  2400              MOVS     r4,#0
;;;38     	
;;;39         for (i = 0; i < nBytes; i++)
;;;40         {
;;;41             if (src[i] != des[i])
;;;42             {
;;;43     			#if (_debug_log_UART_ == 1)	//debug
;;;44                 printf("error idx : %4d : 0x%2X , 0x%2X\r\n", i , src[i],des[i]);
;;;45     			#endif
;;;46     			set_flag(flag_compare_error , ENABLE);
00000c  4d0f              LDR      r5,|L9.76|
00000e  e00e              B        |L9.46|
                  |L9.16|
000010  f8182004          LDRB     r2,[r8,r4]            ;41
000014  5d3b              LDRB     r3,[r7,r4]            ;41
000016  429a              CMP      r2,r3                 ;41
000018  d007              BEQ      |L9.42|
00001a  4621              MOV      r1,r4                 ;44
00001c  a00c              ADR      r0,|L9.80|
00001e  f7fffffe          BL       __2printf
000022  6868              LDR      r0,[r5,#4]  ; BitFlag
000024  f0400002          ORR      r0,r0,#2
000028  6068              STR      r0,[r5,#4]  ; BitFlag
                  |L9.42|
00002a  1c64              ADDS     r4,r4,#1
00002c  b2a4              UXTH     r4,r4                 ;39
                  |L9.46|
00002e  42b4              CMP      r4,r6                 ;39
000030  dbee              BLT      |L9.16|
;;;47             }
;;;48         }
;;;49     
;;;50     	if (!is_flag_set(flag_compare_error))
000032  6868              LDR      r0,[r5,#4]  ; BitFlag
000034  0780              LSLS     r0,r0,#30
000036  d407              BMI      |L9.72|
;;;51     	{
;;;52     		#if (_debug_log_UART_ == 1)	//debug
;;;53         	printf("%s finish \r\n" , __FUNCTION__);	
000038  490e              LDR      r1,|L9.116|
00003a  a00f              ADR      r0,|L9.120|
00003c  f7fffffe          BL       __2printf
;;;54     		#endif
;;;55     		set_flag(flag_compare_error , DISABLE);
000040  6868              LDR      r0,[r5,#4]  ; BitFlag
000042  f0200002          BIC      r0,r0,#2
000046  6068              STR      r0,[r5,#4]  ; BitFlag
                  |L9.72|
;;;56     	}
;;;57     
;;;58     }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;59     
                          ENDP

                  |L9.76|
                          DCD      ||area_number.19||
                  |L9.80|
000050  6572726f          DCB      "error idx : %4d : 0x%2X , 0x%2X\r\n",0
000054  72206964
000058  78203a20
00005c  25346420
000060  3a203078
000064  25325820
000068  2c203078
00006c  2532580d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0
                  |L9.116|
                          DCD      ||.constdata||
                  |L9.120|
000078  25732066          DCB      "%s finish \r\n",0
00007c  696e6973
000080  68200d0a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.copy_buffer||, CODE, READONLY, ALIGN=1

                  copy_buffer PROC
;;;113    
;;;114    void copy_buffer(void *dest, void *src, unsigned int size)
000000  b510              PUSH     {r4,lr}
;;;115    {
;;;116        uint8_t *pu8Src, *pu8Dest;
;;;117        unsigned int i;
;;;118        
;;;119        pu8Dest = (uint8_t *)dest;
;;;120        pu8Src  = (uint8_t *)src;
;;;121    
;;;122    
;;;123    	#if 0
;;;124    	  while (size--)
;;;125    	    *pu8Dest++ = *pu8Src++;
;;;126    	#else
;;;127        for (i = 0; i < size; i++)
000002  2300              MOVS     r3,#0
000004  e002              B        |L10.12|
                  |L10.6|
;;;128            pu8Dest[i] = pu8Src[i];
000006  5ccc              LDRB     r4,[r1,r3]
000008  54c4              STRB     r4,[r0,r3]
00000a  1c5b              ADDS     r3,r3,#1
                  |L10.12|
00000c  4293              CMP      r3,r2                 ;127
00000e  d3fa              BCC      |L10.6|
;;;129    	#endif
;;;130    }
000010  bd10              POP      {r4,pc}
;;;131    
                          ENDP


                          AREA ||i.dump_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  dump_buffer PROC
;;;72     
;;;73     void dump_buffer(uint8_t *pucBuff, int nBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;74     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;75         uint16_t i = 0;
000006  2400              MOVS     r4,#0
;;;76         
;;;77         printf("dump_buffer : %2d\r\n" , nBytes);    
000008  a00b              ADR      r0,|L11.56|
00000a  f7fffffe          BL       __2printf
;;;78         for (i = 0 ; i < nBytes ; i++)
00000e  e00c              B        |L11.42|
                  |L11.16|
;;;79         {
;;;80             printf("0x%2X," , pucBuff[i]);
000010  5d31              LDRB     r1,[r6,r4]
000012  a00e              ADR      r0,|L11.76|
000014  f7fffffe          BL       __2printf
;;;81             if ((i+1)%8 ==0)
000018  0760              LSLS     r0,r4,#29
00001a  f1b04f60          CMP      r0,#0xe0000000
00001e  d102              BNE      |L11.38|
;;;82             {
;;;83                 printf("\r\n");
000020  a00c              ADR      r0,|L11.84|
000022  f7fffffe          BL       __2printf
                  |L11.38|
000026  1c64              ADDS     r4,r4,#1
000028  b2a4              UXTH     r4,r4                 ;78
                  |L11.42|
00002a  42ac              CMP      r4,r5                 ;78
00002c  dbf0              BLT      |L11.16|
;;;84             }            
;;;85         }
;;;86         printf("\r\n\r\n");
00002e  e8bd4070          POP      {r4-r6,lr}
000032  a009              ADR      r0,|L11.88|
000034  f7ffbffe          B.W      __2printf
;;;87     }
;;;88     
                          ENDP

                  |L11.56|
000038  64756d70          DCB      "dump_buffer : %2d\r\n",0
00003c  5f627566
000040  66657220
000044  3a202532
000048  640d0a00
                  |L11.76|
00004c  30782532          DCB      "0x%2X,",0
000050  582c00  
000053  00                DCB      0
                  |L11.84|
000054  0d0a00            DCB      "\r\n",0
000057  00                DCB      0
                  |L11.88|
000058  0d0a0d0a          DCB      "\r\n\r\n",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.dump_buffer_hex||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  dump_buffer_hex PROC
;;;88     
;;;89     void  dump_buffer_hex(uint8_t *pucBuff, int nBytes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90     {
000004  460e              MOV      r6,r1
000006  4607              MOV      r7,r0
;;;91         int     nIdx, i;
;;;92     
;;;93         nIdx = 0;
000008  2500              MOVS     r5,#0
00000a  e025              B        |L12.88|
                  |L12.12|
;;;94         while (nBytes > 0)
;;;95         {
;;;96             printf("0x%04X  ", nIdx);
00000c  4629              MOV      r1,r5
00000e  a016              ADR      r0,|L12.104|
000010  f7fffffe          BL       __2printf
;;;97             for (i = 0; i < 16; i++)
000014  2400              MOVS     r4,#0
                  |L12.22|
;;;98                 printf("%02X ", pucBuff[nIdx + i]);
000016  1928              ADDS     r0,r5,r4
000018  5c39              LDRB     r1,[r7,r0]
00001a  a016              ADR      r0,|L12.116|
00001c  f7fffffe          BL       __2printf
000020  1c64              ADDS     r4,r4,#1
000022  2c10              CMP      r4,#0x10              ;97
000024  dbf7              BLT      |L12.22|
;;;99             printf("  ");
000026  a015              ADR      r0,|L12.124|
000028  f7fffffe          BL       __2printf
;;;100            for (i = 0; i < 16; i++)
00002c  2400              MOVS     r4,#0
                  |L12.46|
;;;101            {
;;;102                if ((pucBuff[nIdx + i] >= 0x20) && (pucBuff[nIdx + i] < 127))
00002e  1928              ADDS     r0,r5,r4
000030  5c39              LDRB     r1,[r7,r0]
000032  f1a10020          SUB      r0,r1,#0x20
000036  285f              CMP      r0,#0x5f
000038  d203              BCS      |L12.66|
;;;103                    printf("%c", pucBuff[nIdx + i]);
00003a  a011              ADR      r0,|L12.128|
00003c  f7fffffe          BL       __2printf
000040  e002              B        |L12.72|
                  |L12.66|
;;;104                else
;;;105                    printf(".");
000042  a010              ADR      r0,|L12.132|
000044  f7fffffe          BL       __2printf
                  |L12.72|
000048  1c64              ADDS     r4,r4,#1
00004a  1e76              SUBS     r6,r6,#1
00004c  2c10              CMP      r4,#0x10              ;100
00004e  dbee              BLT      |L12.46|
;;;106                nBytes--;
;;;107            }
;;;108            nIdx += 16;
;;;109            printf("\n");
000050  a00d              ADR      r0,|L12.136|
000052  3510              ADDS     r5,r5,#0x10
000054  f7fffffe          BL       __2printf
                  |L12.88|
000058  2e00              CMP      r6,#0                 ;94
00005a  dcd7              BGT      |L12.12|
;;;110        }
;;;111        printf("\n");
00005c  e8bd41f0          POP      {r4-r8,lr}
000060  a009              ADR      r0,|L12.136|
000062  f7ffbffe          B.W      __2printf
;;;112    }
;;;113    
                          ENDP

000066  0000              DCW      0x0000
                  |L12.104|
000068  30782530          DCB      "0x%04X  ",0
00006c  34582020
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L12.116|
000074  25303258          DCB      "%02X ",0
000078  2000    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L12.124|
00007c  202000            DCB      "  ",0
00007f  00                DCB      0
                  |L12.128|
000080  256300            DCB      "%c",0
000083  00                DCB      0
                  |L12.132|
000084  2e00              DCB      ".",0
000086  00                DCB      0
000087  00                DCB      0
                  |L12.136|
000088  0a00              DCB      "\n",0
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;402    
;;;403    int main()
000000  f7fffffe          BL       SYS_Init
;;;404    {	
;;;405        SYS_Init();
;;;406    	
;;;407    	UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;408    	Custom_Init();	
000008  f7fffffe          BL       Custom_Init
;;;409    
;;;410    
;;;411    	TIMER1_Init();
00000c  f7fffffe          BL       TIMER1_Init
;;;412    
;;;413    //    NVIC_EnableIRQ(PDMA_IRQn);
;;;414    	
;;;415    	SpiLED_Init();
000010  f7fffffe          BL       SpiLED_Init
;;;416    	LED_SNLED2735Init(SPI_LED0);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       LED_SNLED2735Init
;;;417    	LED_SNLED2735Init(SPI_LED1);
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       LED_SNLED2735Init
;;;418    	LED_SNLED2735Init(SPI_LED2);
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       LED_SNLED2735Init
                  |L13.38|
;;;419    	
;;;420        /* Got no where to go, just loop forever */
;;;421        while(1)
000026  e7fe              B        |L13.38|
;;;422        {
;;;423    
;;;424        }
;;;425    }
;;;426    
                          ENDP


                          AREA ||i.reset_buffer||, CODE, READONLY, ALIGN=1

                  reset_buffer PROC
;;;59     
;;;60     void reset_buffer(uint8_t *pucBuff, int nBytes)
000000  2200              MOVS     r2,#0
;;;61     {
;;;62     	#if 1
;;;63         uint16_t i = 0;	
000002  4613              MOV      r3,r2
000004  e002              B        |L14.12|
                  |L14.6|
;;;64         for ( i = 0; i < nBytes; i++)
;;;65         {
;;;66             pucBuff[i] = 0x00;
000006  5483              STRB     r3,[r0,r2]
000008  1c52              ADDS     r2,r2,#1
00000a  b292              UXTH     r2,r2                 ;64
                  |L14.12|
00000c  428a              CMP      r2,r1                 ;64
00000e  dbfa              BLT      |L14.6|
;;;67         }	
;;;68     	#else	//extra 20 bytes , with <string.h>
;;;69     	memset(pucBuff, 0, nBytes * (sizeof(pucBuff[0]) ));
;;;70     	#endif
;;;71     }
000010  4770              BX       lr
;;;72     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000004  6172655f          DCB      0x61,0x72,0x65,0x5f
000008  62756666          DCB      0x62,0x75,0x66,0x66
00000c  657200            DCB      0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  SPI_LED_Num
000000  00                DCB      0x00

                          AREA ||area_number.19||, DATA, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.data||
                  CNT_1000ms
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  BitFlag
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_34948d84____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_34948d84____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_34948d84____REVSH|
#line 402
|__asm___6_main_c_34948d84____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_34948d84____RRX|
#line 587
|__asm___6_main_c_34948d84____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
